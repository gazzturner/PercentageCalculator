{"version":3,"sources":["Components/ResultForm.js","Components/AdditionalPayments.js","Components/InputForm.js","App.js","serviceWorker.js","index.js"],"names":["ResultForm","props","finalAmount","AdditionalPayments","additionalPayment","InputForm","setTotal","event","setState","total","target","value","setPercentage","percentageTaken","generatePercentage","amountTaken","state","additionalPaymentAmount","additionalPayments","forEach","payment","parseFloat","amountForClient","setAdditionalPayment","newAdditionalPayment","addAdditionalPayment","updatedAdditionalPayments","push","resetForm","window","location","reload","this","map","index","onChange","onClick","Component","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8PAQeA,G,MANI,SAACC,GAChB,OACI,uDAA0BA,EAAMC,eCIzBC,EANY,SAACF,GACxB,OACI,oCAAOA,EAAMG,oBCAAC,E,kDACrB,WAAYJ,GAAQ,IAAD,8BACf,cAAMA,IAURK,SAAW,SAACC,GACV,EAAKC,SAAS,CAAEC,MAAOF,EAAMG,OAAOC,SAZrB,EAejBC,cAAgB,SAACL,GACf,EAAKC,SAAS,CAAEK,gBAAiBN,EAAMG,OAAOC,SAhB/B,EAmBjBG,mBAAqB,WACnB,IAAIC,EAAe,EAAKC,MAAMP,MAAM,IAAO,EAAKO,MAAMH,gBAClDI,EAA0B,EAC9B,EAAKD,MAAME,mBAAmBC,SAAQ,SAAAC,GACpCH,GAA2BI,WAAWD,MAExCL,GAAeM,WAAWJ,GAC1B,EAAKT,SAAS,CAACc,gBAAiB,EAAKN,MAAMP,MAAQM,KA1BpC,EA6BjBQ,qBAAuB,SAAChB,GACtB,EAAKC,SAAS,CAACgB,qBAAsBjB,EAAMG,OAAOC,SA9BnC,EAiCjBc,qBAAuB,WACrB,IAAIC,EAA4B,EAAKV,MAAME,mBAC3CQ,EAA0BC,KAAK,EAAKX,MAAMQ,sBAC1C,EAAKhB,SAAS,CAACgB,qBAAsB,OACrC,EAAKhB,SAAS,CAACU,mBAAoBQ,KArCpB,EAwCjBE,UAAY,WACVC,OAAOC,SAASC,UAvChB,EAAKf,MAAQ,CACXP,MAAO,KACPI,gBAAiB,KACjBK,mBAAoB,GACpBI,gBAAiB,KACjBE,qBAAsB,MAPT,E,qDA6Cf,IAAIN,EAQA,OAPJA,EAAqBc,KAAKhB,MAAME,mBAAmBe,KAAI,SAACb,EAASc,GAC/D,OAAO,kBAAC,EAAD,CACL9B,kBAAmBgB,OAMf,yDAC0B,2BAAOT,MAAOqB,KAAKhB,MAAMP,MAAO0B,SAAUH,KAAK1B,WAAY,6BADrF,2BAE4B,2BAAOK,MAAOqB,KAAKhB,MAAMH,gBAAiBsB,SAAUH,KAAKpB,gBAFrF,IAEuG,6BAFvG,8BAG+B,2BAAOD,MAAOqB,KAAKhB,MAAMQ,qBAAsBW,SAAUH,KAAKT,uBAH7F,IAGqH,4BAAQa,QAASJ,KAAKP,sBAAtB,KAAsD,6BAH3K,wBAK0BP,EAAmB,6BACzC,4BAAQkB,QAASJ,KAAKlB,oBAAtB,YAA2D,6BAC3D,kBAAC,EAAD,CAAYZ,YAAa8B,KAAKhB,MAAMM,kBAEpC,4BAAQc,QAASJ,KAAKJ,WAAtB,mB,GAhEuBS,aCAlBC,E,kDACnB,WAAYrC,GAAQ,IAAD,8BACjB,cAAMA,IACDe,MAAQ,GAFI,E,qDAOjB,OACE,oCACE,mGACA,kBAAC,EAAD,W,GAXyBqB,aCQbE,QACW,cAA7BV,OAAOC,SAASU,UAEe,UAA7BX,OAAOC,SAASU,UAEhBX,OAAOC,SAASU,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.bba5044c.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst ResultForm = (props) => {\r\n    return (\r\n        <div>Amount for client: £{props.finalAmount}</div>\r\n    );\r\n};\r\n\r\nexport default ResultForm;","import React from 'react';\r\n\r\nconst AdditionalPayments = (props) => {\r\n    return (\r\n        <div>£{props.additionalPayment}</div>\r\n    );\r\n};\r\n\r\nexport default AdditionalPayments;","import React, {Component} from 'react';\r\nimport ResultForm from './ResultForm'\r\nimport AdditionalPayments from './AdditionalPayments';\r\n\r\nexport default class InputForm extends Component {\r\nconstructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      total: null,\r\n      percentageTaken: null,\r\n      additionalPayments: [],\r\n      amountForClient: null,\r\n      newAdditionalPayment: null\r\n    };\r\n  }\r\n  \r\n  setTotal = (event) => {\r\n    this.setState({ total: event.target.value });\r\n  }\r\n\r\n  setPercentage = (event) => {\r\n    this.setState({ percentageTaken: event.target.value });\r\n  }\r\n\r\n  generatePercentage = () => {\r\n    var amountTaken = (this.state.total/100) * this.state.percentageTaken;\r\n    var additionalPaymentAmount = 0;\r\n    this.state.additionalPayments.forEach(payment => {\r\n      additionalPaymentAmount += parseFloat(payment);\r\n    });\r\n    amountTaken += parseFloat(additionalPaymentAmount);\r\n    this.setState({amountForClient: this.state.total - amountTaken}); \r\n  }\r\n\r\n  setAdditionalPayment = (event) => {\r\n    this.setState({newAdditionalPayment: event.target.value});\r\n  }\r\n\r\n  addAdditionalPayment = () => {\r\n    let updatedAdditionalPayments = this.state.additionalPayments;\r\n    updatedAdditionalPayments.push(this.state.newAdditionalPayment);\r\n    this.setState({newAdditionalPayment: null});\r\n    this.setState({additionalPayments: updatedAdditionalPayments}); \r\n  }\r\n\r\n  resetForm = () =>  {\r\n    window.location.reload();\r\n  }\r\n\r\n  render(){\r\n    let additionalPayments = null;\r\n    additionalPayments = this.state.additionalPayments.map((payment, index) => {\r\n      return(<AdditionalPayments\r\n        additionalPayment={payment}\r\n        />\r\n      )\r\n    });\r\n\r\n        return(\r\n            <div>\r\n                Enter Total Damages: £<input value={this.state.total} onChange={this.setTotal} /><br/>\r\n                Enter Percentage Taken: <input value={this.state.percentageTaken} onChange={this.setPercentage} />%<br/>\r\n                Add An Additional Payment: <input value={this.state.newAdditionalPayment} onChange={this.setAdditionalPayment}/> <button onClick={this.addAdditionalPayment}>+</button><br />\r\n                \r\n                Additional Payments: {additionalPayments}<br />\r\n                <button onClick={this.generatePercentage}>Generate</button><br />\r\n                <ResultForm finalAmount={this.state.amountForClient} />\r\n\r\n                <button onClick={this.resetForm}>Reset Form</button>\r\n            </div>\r\n        );\r\n    };\r\n};\r\n","import React, {Component} from 'react';\nimport './App.css';\nimport InputForm from './Components/InputForm'\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n    };\n  }\n\n  render() {\n    return (\n      <>\n        <h3>This is for my own purposes and should not be used for actual cases</h3>\n        <InputForm></InputForm>\n      </>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}